1) closures: function that remembers the lexical enviornment, even outer function has completed 
its excution closure allows function to access the variable.
ex: to count the no of request per user:

        const countRequest = () => {
            let requestCount = 0;

            return (user) => {
                requestCount += 1;
            console.log(`${user} has made ${requestCount} requests.`);
            };
        };

        const trackUserRequestCount = countRequest();

        // Simulate user requests
        trackUserRequests("User123"); // User123 has made 1 requests.
        trackUserRequests("User123"); // User123 has made 2 requests.
        trackUserRequests("User456"); // User456 has made 3 requests.
        trackUserRequests("User123"); // User123 has made 4 requests.

example 2 : to memoize the result

        const momoize = (fun) => {
            let cache = {};

            return (args) => {
                if(cache[args]){
                    console.log("retrieved cache");
                    return cache[args];
                }else{
                    result = fun(args);
                    cache[args] = result;
                    return result;
                }
            }
        }

        const fact = (n) => {
            if (n==0) return 1;
            return n * fact(n);
        }

        const closure = momoize(fact);
        console.log(closure(5)); //calculated
        console.log(closure(5)); // retrived from cache

//fetch the user details using userid

//index.js (backend)

        const mongoose = require('mongoose');
        const express = require('express');

        const app = express();

        mongoose.connect('url', {useNewUrlParser: true, useUnifiedTopology: true})
        .then(() => console.log("Connected"))
        .catch((err) => console.error(err));

        //define a user schema and model
        const userSchema = new mongoose.Schema({
            name: String,
            email: String,
            age: Number,
        })

        const User = mongoose.model('User',userSchema);

        const getUserById = async (userid) => {
            try{
            const userData = await User.findById(userid);
            if(!userData){
                throw new Error("user not found");
            }
            return user;
            }
            catch (error){
                console.error("error fetching result");
                throw error;
            }
        }

        app.get('/user/:id', async (res,req) => {
        try{
            const userId = res.param.id;
            const user = await getUserById(userId);
            res.status(200).json(user);
        }catch (error){
            res.status(500).json({massage: "error fetching data", error: error.message});
        }
        });

        app.listen(3000, () =>{
            console.log("App listening on port 3000");
        }