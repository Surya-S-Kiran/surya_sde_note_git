/*
1) closures: function that remembers the lexical enviornment, even outer function has completed 
its excution closure allows function to access the variable.
ex: to count the no of request per user:

        const countRequest = () => {
            let requestCount = 0;

            return (user) => {
                requestCount += 1;
            console.log(`${user} has made ${requestCount} requests.`);
            };
        };

        const trackUserRequestCount = countRequest();

        // Simulate user requests
        trackUserRequests("User123"); // User123 has made 1 requests.
        trackUserRequests("User123"); // User123 has made 2 requests.
        trackUserRequests("User456"); // User456 has made 3 requests.
        trackUserRequests("User123"); // User123 has made 4 requests.

example 2 : to memoize the result

        const momoize = (fun) => {
            let cache = {};

            return (args) => {
                if(cache[args]){
                    console.log("retrieved cache");
                    return cache[args];
                }else{
                    result = fun(args);
                    cache[args] = result;
                    return result;
                }
            }
        }

        const fact = (n) => {
            if (n==0) return 1;
            return n * fact(n);
        }

        const closure = momoize(fact);
        console.log(closure(5)); //calculated
        console.log(closure(5)); // retrived from cache

//fetch the user details using userid

//index.js (backend)

        const mongoose = require('mongoose');
        const express = require('express');

        const app = express();

        mongoose.connect('url', {useNewUrlParser: true, useUnifiedTopology: true})
        .then(() => console.log("Connected"))
        .catch((err) => console.error(err));

        //define a user schema and model
        const userSchema = new mongoose.Schema({
            name: String,
            email: String,
            age: Number,
        })

        const User = mongoose.model('User',userSchema);

        const getUserById = async (userid) => {
            try{
            const userData = await User.findById(userid);
            if(!userData){
                throw new Error("user not found");
            }
            return user;
        }
            catch (error){
                console.error("error fetching result");
                throw error;
            }
        }

        app.get('/user/:id', async (res,req) => {
        try{
            const userId = res.param.id;
            const user = await getUserById(userId);
            res.status(200).json(user);
        }catch (error){
            res.status(500).json({massage: "error fetching data", error: error.message});
        }
        });

        app.listen(3000, () =>{
            console.log("App listening on port 3000");
        }
*/
//on frontend 
//app.js
/*
        import React from "react";
        import UserComponent from "./UserComponent";

        const App = () => {
        return (
        <div>
            <h1> Dynamic user fetcher</h1>
            <UserComponent />
        </div>
        );
        };
*/
//UserComponent.js
/*
import React, {useEffect, useState} from 'react';

const userComponent = () => {
    const [userId, setUserId] = useState('');
    const [userData, setUserData] = useState(null);
    
}
*/
/* 


let obj = {
    a:'valueA',
    b: {
        c: 'valueB',
        d: {
            e: 'valueE'
        }
    }
}

const flaten = (obj) => {
    let result = [];
    const solve = (curr, currPath) => {
        for(let key in curr){
            const newpath = currPath ? `${currPath}.${key}` : key;
            if(typeof curr[key] === "object" && curr[key] !== null){
                solve(curr[key],newpath);
            }else{
                result.push({path:newpath, value: curr[key]});
            }
        }
    }
    solve(obj,"");
    return result;
}
console.log(flaten(obj))

output :

[
  { path: 'a', value: 'valueA' },
  { path: 'b.c', value: 'valueB' },
  { path: 'b.d.e', value: 'valueE' }
]

*/
//javascript arrays
/*
let arr = [];
let arr = new Array(5);
let arr = new Array(1,2,3,4,5);
let arr = [1,2,3,4,5];
let arr = Array(5).fill(0);
let arr = new Array(5).fill().map((_,idx) => idx+1); // creates array [1,2,3,4,5]
let arr1 = arr; // craete deep copy => arr1 is alias of arr 
let arr1 = [...arr]; // create shallow copy => arr1 is different from arr

*/

//javascript iterables
/*
Js iterable are those who implements Symbol.iterator method and can be called with next() method

we can use for..of loop and Array.from() method to iterate over iterable objects

example of iterable:
1) Array 2) String 3) Map 4) Set 
example of non iterable:
1) Number 2) Function 3) Object 4) Boolean

itrete an object:

let obj = {a:1, b:2, c:3};
for(let key in obj){
    console.log(key, obj[key]);
}
        or
let obj = {a:1,b:2,c:3};
let entries = Object.entries(obj);
for(let [key,value] of entries){
    console.log(key,'->',value);
}

*/